// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

interface MonoXPool {
    event ApprovalForAll(
        address indexed account,
        address indexed operator,
        bool approved
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );
    event TransferSingle(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 id,
        uint256 value
    );
    event URI(string value, uint256 indexed id);

    function WETH() external view returns (address);

    function admin() external view returns (address);

    function balanceOf(address account, uint256 id)
        external
        view
        returns (uint256);

    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)
        external
        view
        returns (uint256[] memory);

    function burn(
        address account,
        uint256 id,
        uint256 amount
    ) external;

    function createdAt(uint256) external view returns (uint256);

    function depositWETH(uint256 amount) external;

    function initialize(address _WETH) external;

    function isApprovedForAll(address account, address operator)
        external
        view
        returns (bool);

    function isUnofficial(uint256) external view returns (bool);

    function liquidityLastAddedOf(uint256 pid, address account)
        external
        view
        returns (uint256);

    function mint(
        address account,
        uint256 id,
        uint256 amount
    ) external;

    function mintLp(
        address account,
        uint256 id,
        uint256 amount,
        bool _isUnofficial
    ) external;

    function owner() external view returns (address);

    function renounceOwnership() external;

    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) external;

    function safeTransferERC20Token(
        address token,
        address to,
        uint256 amount
    ) external;

    function safeTransferETH(address to, uint256 amount) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) external;

    function setAdmin(address _admin) external;

    function setApprovalForAll(address operator, bool approved) external;

    function setURI(string memory uri) external;

    function setWhitelist(address _whitelist, bool _isWhitelist) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function topHolder(uint256) external view returns (address);

    function topLPHolderOf(uint256 pid) external view returns (address);

    function totalSupply(uint256) external view returns (uint256);

    function totalSupplyOf(uint256 pid) external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function uri(uint256) external view returns (string memory);

    function withdrawWETH(uint256 amount) external;
    // 由于高版本的问题，这行要注释掉
    // receive() external payable;
}