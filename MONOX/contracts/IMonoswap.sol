// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

interface Monoswap {
    event AddLiquidity(
        address indexed provider,
        uint256 indexed pid,
        address indexed token,
        uint256 liquidityAmount,
        uint256 vcashAmount,
        uint256 tokenAmount,
        uint256 price
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event PoolBalanced(address _token, uint256 vcashIn);
    event PoolStatusChanged(address _token, uint8 oldStatus, uint8 newStatus);
    event RemoveLiquidity(
        address indexed provider,
        uint256 indexed pid,
        address indexed token,
        uint256 liquidityAmount,
        uint256 vcashAmount,
        uint256 tokenAmount,
        uint256 price
    );
    event Swap(
        address indexed user,
        address indexed tokenIn,
        address indexed tokenOut,
        uint256 amountIn,
        uint256 amountOut,
        uint256 swapVcashValue
    );
    event SyntheticPoolPriceChanged(address _token, uint256 price);

    function _removeLiquidity(
        address _token,
        uint256 liquidity,
        address to
    )
        external
        view
        returns (
            uint256 poolValue,
            uint256 liquidityIn,
            uint256 vcashOut,
            uint256 tokenOut
        );

    function addLiquidity(
        address _token,
        uint256 _amount,
        address to
    ) external returns (uint256 liquidity);

    function addLiquidityETH(address to)
        external
        payable
        returns (uint256 liquidity);

    function addLiquidityPair(
        address _token,
        uint256 vcashAmount,
        uint256 tokenAmount,
        address to
    ) external returns (uint256 liquidity);

    function addSpecialToken(
        address _token,
        uint256 _price,
        uint8 _status
    ) external returns (uint256 _pid);

    function getAmountIn(
        address tokenIn,
        address tokenOut,
        uint256 amountOut
    )
        external
        view
        returns (
            uint256 tokenInPrice,
            uint256 tokenOutPrice,
            uint256 amountIn,
            uint256 tradeVcashValue
        );

    function getAmountOut(
        address tokenIn,
        address tokenOut,
        uint256 amountIn
    )
        external
        view
        returns (
            uint256 tokenInPrice,
            uint256 tokenOutPrice,
            uint256 amountOut,
            uint256 tradeVcashValue
        );

    function getConfig()
        external
        view
        returns (
            address _vCash,
            address _weth,
            address _feeTo,
            uint16 _fees,
            uint16 _devFee
        );

    function getPool(address _token)
        external
        view
        returns (
            uint256 poolValue,
            uint256 tokenBalanceVcashValue,
            uint256 vcashCredit,
            uint256 vcashDebt
        );

    function initialize(address _monoXPool, address _vcash) external;

    function lastTradedBlock(address) external view returns (uint256);

    function listNewToken(
        address _token,
        uint256 _price,
        uint256 vcashAmount,
        uint256 tokenAmount,
        address to
    ) external returns (uint256 _pid, uint256 liquidity);

    function monoXPool() external view returns (address);

    function owner() external view returns (address);

    function poolSize() external view returns (uint256);

    function poolSizeMinLimit() external view returns (uint256);

    function pools(address)
        external
        view
        returns (
            uint256 pid,
            uint256 lastPoolValue,
            address token,
            uint8 status,
            uint112 vcashDebt,
            uint112 vcashCredit,
            uint112 tokenBalance,
            uint256 price,
            uint256 createdAt
        );

    function priceAdjusterRole(address) external view returns (bool);

    function rebalancePool(address _token) external;

    function removeLiquidity(
        address _token,
        uint256 liquidity,
        address to,
        uint256 minVcashOut,
        uint256 minTokenOut
    ) external returns (uint256 vcashOut, uint256 tokenOut);

    function removeLiquidityETH(
        uint256 liquidity,
        address to,
        uint256 minVcashOut,
        uint256 minTokenOut
    ) external returns (uint256 vcashOut, uint256 tokenOut);

    function renounceOwnership() external;

    function setDevFee(uint16 _devFee) external;

    function setFeeTo(address _feeTo) external;

    function setFees(uint16 _fees) external;

    function setPoolSizeMinLimit(uint256 _poolSizeMinLimit) external;

    function setSynthPoolPrice(address _token, uint256 price) external;

    function setTokenInsurance(address _token, uint256 _insurance) external;

    function setTokenStatus(address _token, uint8 _status) external;

    function swapETHForExactToken(
        address tokenOut,
        uint256 amountInMax,
        uint256 amountOut,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountIn);

    function swapExactETHForToken(
        address tokenOut,
        uint256 amountOutMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountOut);

    function swapExactTokenForETH(
        address tokenIn,
        uint256 amountIn,
        uint256 amountOutMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountOut);

    function swapExactTokenForToken(
        address tokenIn,
        address tokenOut,
        uint256 amountIn,
        uint256 amountOutMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountOut);

    function swapTokenForExactETH(
        address tokenIn,
        uint256 amountInMax,
        uint256 amountOut,
        address to,
        uint256 deadline
    ) external returns (uint256 amountIn);

    function swapTokenForExactToken(
        address tokenIn,
        address tokenOut,
        uint256 amountInMax,
        uint256 amountOut,
        address to,
        uint256 deadline
    ) external returns (uint256 amountIn);

    function tokenInsurance(address) external view returns (uint256);

    function tokenPoolStatus(address) external view returns (uint8);

    function transferOwnership(address newOwner) external;

    function updatePoolPrice(address _token, uint256 _newPrice) external;

    function updatePoolStatus(address _token, uint8 _status) external;

    function updatePriceAdjuster(address account, bool _status) external;
}